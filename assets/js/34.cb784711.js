(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{244:function(s,t,e){"use strict";e.r(t);var a=e(0),r=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"vue的编译过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue的编译过程"}},[s._v("#")]),s._v(" vue的编译过程")]),s._v(" "),e("h3",{attrs:{id:"编译"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编译"}},[s._v("#")]),s._v(" 编译")]),s._v(" "),e("p",[s._v("vue的模板编译（compile）是在$mount中进行的，过程可以分为三个阶段，parse， optimize， generate， 最终会得到render function。")]),s._v(" "),e("ol",[e("li",[s._v("parse")])]),s._v(" "),e("p",[s._v("这是解析template阶段，使用正则表达式，通过对标签吗开头、标签名结尾、属性字段、文本内容等进行匹配截取，这是一个递归的过程。最后会形成\bAST。")]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// parse 里定义的一些正则")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" onRE "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^@|^v-on:/")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//匹配 v-on")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" dirRE "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/^v-|^@|^:/")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//匹配 v-on 和 v-bind")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" forAliasRE "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/(.*?)\\s+(?:in|of)\\s+(.*)/")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//匹配 v-for 属性")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("export")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" forIteratorRE "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[s._v("/\\((\\{[^}]*\\}|[^,]*),([^,]*)(?:,([^,]*))?\\)/")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//匹配 v-for 的多种形式")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("ol",{attrs:{start:"2"}},[e("li",[s._v("optimize")])]),s._v(" "),e("p",[s._v("对 parse 生成的 AST 进行静态内容的优化，标记 static 静态节点，静态内容是指"),e("strong",[s._v("和数据没有关系，不需要每次都刷新的内容")]),s._v("，到后面的update更新界面的时候，会有一个patch过程，这个时候就会跳过静态节点，从而减少了比较的过程，提高了性能。optimize 的过程分为两步：")]),s._v(" "),e("ul",[e("li",[s._v("标记所有的静态节点和非静态节点")]),s._v(" "),e("li",[s._v("标记静态根节点")])]),s._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[s._v("generate")])]),s._v(" "),e("p",[s._v("这个过程会把AST转化成render function 字符串，和 staticRenderFns 字符串，这个函数是用来单独生成静态节点的VNode。")])])}),[],!1,null,null,null);t.default=r.exports}}]);