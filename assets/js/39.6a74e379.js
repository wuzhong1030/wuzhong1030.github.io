(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{249:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"执行上下文的类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文的类型"}},[t._v("#")]),t._v(" 执行上下文的类型")]),t._v(" "),s("blockquote",[s("p",[t._v("当前 javascript 代码解析和执行所创建的抽象环境。")])]),t._v(" "),s("ul",[s("li",[t._v("全局执行上下文\n\b只有一个全局上下文，在浏览器环境下，全局上下文就是window对象，this指向的是全局对象")]),t._v(" "),s("li",[t._v("函数执行上下文\n可能有多个，只有在函数被调用的时候才会创建，也就是每次函数被调用的时候都会创建一个属于该函数的执行上下文对象")]),t._v(" "),s("li",[t._v("eval\n指的是在 eval 中运行的代码，极少使用")])]),t._v(" "),s("h3",{attrs:{id:"执行栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行栈"}},[t._v("#")]),t._v(" 执行栈")]),t._v(" "),s("p",[t._v("也叫 "),s("code",[t._v("调用栈")]),t._v("，是一种 LIFO （后进先出）的数据结构，用于存储代码执行期间所创建的执行上下文。\n当js引擎执行script标签中的代码，首先进入执行栈的是全局上下文对象，然后遇到函数调用时，引擎会为这个函数创建一个函数执行上下文并push到执行栈的栈顶。\n根据LIFO规则，当栈顶的函数执行完毕之后，会执行出栈操作，也就是从当前执行栈的栈顶弹出，上下文控制权会交给当前执行栈的下一个执行上下文。")]),t._v(" "),s("h3",{attrs:{id:"执行上下文的创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文的创建"}},[t._v("#")]),t._v(" 执行上下文的创建")]),t._v(" "),s("p",[t._v("执行上下文分两个阶段创建：1）创建阶段； 2）执行阶段")]),t._v(" "),s("h4",{attrs:{id:"创建阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建阶段"}},[t._v("#")]),t._v(" 创建阶段")]),t._v(" "),s("ul",[s("li",[t._v("LexicalEnvironment（词法环境） 组件被创建")]),t._v(" "),s("li",[t._v("VariableEnvironment（变量环境） 组件被创建")])]),t._v(" "),s("p",[t._v("伪代码")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("ExecutionContext "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("  \n  LexicalEnvironment "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 词法环境")]),t._v("\n  VariableEnvironment "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量环境")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h5",{attrs:{id:"词法环境（lexical-environment）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#词法环境（lexical-environment）"}},[t._v("#")]),t._v(" 词法环境（Lexical Environment）")]),t._v(" "),s("p",[t._v("词法环境有两个组成部分")]),t._v(" "),s("ol",[s("li",[t._v("环境记录：存储变量和函数声明的实际位置")]),t._v(" "),s("li",[t._v("对外部环境的引用：可以访问其外部词法环境")])]),t._v(" "),s("p",[t._v("词法环境有两种类型")]),t._v(" "),s("ol",[s("li",[t._v("全局环境：是一个没有外部环境的词法环境，其外部环境引用为 null。拥有一个全局对象（window 对象）及其关联的方法和属性（例如数组方法）以及任何用户自定义的全局变量，this 的值指向这个全局对象。")]),t._v(" "),s("li",[t._v("函数环境：用户在函数中定义的变量被存储在环境记录中，包含了arguments 对象。对外部环境的引用可以是全局环境，也可以是包含内部函数的外部函数环境。")])]),t._v(" "),s("h5",{attrs:{id:"变量环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量环境"}},[t._v("#")]),t._v(" 变量环境")]),t._v(" "),s("p",[t._v("变量环境也是一个词法环境，在 ES6 中，词法 环境和 变量 环境的区别在于前者用于存储函数声明和变量（ let 和 const ）绑定，而后者仅用于存储变量（ var ）绑定。")]),t._v(" "),s("p",[t._v("变量提升的原因：在创建阶段，函数声明存储在环境中，而变量会被设置为 undefined（在 var 的情况下）或保持未初始化（在 let 和 const 的情况下）。所以这就是为什么可以在声明之前访问 var 定义的变量（尽管是 undefined ），但如果在声明之前访问 let 和 const 定义的变量就会提示引用错误的原因。这就是所谓的变量提升。")]),t._v(" "),s("h5",{attrs:{id:"执行阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行阶段"}},[t._v("#")]),t._v(" 执行阶段")]),t._v(" "),s("p",[t._v("此阶段，完成对所有变量的分配，最后执行代码。")]),t._v(" "),s("p",[t._v("如果 Javascript 引擎在源代码中声明的实际位置找不到 let 变量的值，那么将为其分配 undefined 值。")])])}),[],!1,null,null,null);a.default=e.exports}}]);